---
- name: Update DNS records in Cloudflare
  hosts: localhost
  gather_facts: no

  vars:
    cloudflare_api_token: "{{ lookup('env', 'CLOUDFLARE_API_TOKEN') }}"

  tasks:
    - name: Get the current public IP address
      uri:
        url: "https://ifconfig.me/ip"
        return_content: yes
        headers:
          Accept: "text/plain"
      register: ifconfig_me_response

    - name: Set new IP address fact
      set_fact:
        new_ip_address: "{{ ifconfig_me_response.content.strip() }}"

    - name: Get Cloudflare domains
      uri:
        url: "https://api.cloudflare.com/client/v4/zones"
        method: GET
        headers:
          Authorization: "Bearer {{ cloudflare_api_token }}"
          Content-Type: "application/json"
        return_content: yes
      register: zones_response

    - name: Set Cloudflare domain fact
      set_fact:
        cloudflare_domain: "{{ (zones_response.json.result | map(attribute='name') | list)[0] }}"  # Selects the first domain. Adjust for multi-domain setup.

    - name: Set Cloudflare zone ID fact
      set_fact:
        cloudflare_zone_id: "{{ (zones_response.json.result | selectattr('name', 'equalto', cloudflare_domain) | list)[0].id }}" # Selects the first zone. Adjust for multi-zone setup.

    - name: Get all DNS records
      uri:
        url: "https://api.cloudflare.com/client/v4/zones/{{ cloudflare_zone_id }}/dns_records"
        method: GET
        headers:
          Authorization: "Bearer {{ cloudflare_api_token }}"
          Content-Type: "application/json"
        return_content: yes
        status_code: 200
      register: dns_records_response

    - name: Set DNS records fact
      set_fact:
        dns_records: "{{ dns_records_response.json.result }}"

    - name: Update DNS records
      community.general.cloudflare_dns:
        zone: "{{ cloudflare_domain }}"
        api_token: "{{ cloudflare_api_token }}"
        record: "{{ item.name }}"
        type: "A"
        proxied: true
        value: "{{ new_ip_address }}"
        state: present
      with_items: "{{ dns_records }}"
      register: dns_update_result

    - name: Print DNS update result
      debug:
        msg: "DNS record for {{ item.item.name }} updated successfully."
      with_items: "{{ dns_update_results.results }}"
      when: item.changed

    - name: Print DNS update failure
      debug:
        msg: "Failed to update DNS record for {{ item.item.name }}."
      with_items: "{{ dns_update_results.results }}"
      when: item.failed