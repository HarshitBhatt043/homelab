---
- name: Configure UFW
  hosts: proxy
  become: yes
  vars:
    local_subnet: "{{ lookup('env', 'LOCAL_SUBNET') }}"
  tasks:
    - name: Check if server is pingable
      ansible.builtin.ping:
      register: ansible_ping_result

    - name: Set UFW default policies
      ufw:
        policy: "{{ item.policy }}"
      loop:
        - { policy: deny, direction: incoming }
        - { policy: allow, direction: outgoing }
      when: ansible_ping_result.ping == 'pong'

    - name: Allow traffic from local subnet
      ufw:
        rule: allow
        src: "{{ local_subnet }}"
      when: ansible_ping_result.ping == 'pong'

    - name: Allow SSH from local subnet
      ufw:
        rule: allow
        src: "{{ local_subnet }}"
        port: 22
        proto: tcp
      when: ansible_ping_result.ping == 'pong'

    - name: Fetch Cloudflare IPs
      uri:
        url: "https://www.cloudflare.com/ips-v{{ item }}"
        return_content: yes
      loop:
        - 4
        - 6
      register: cloudflare_ips
      when: ansible_ping_result.ping == 'pong'

    - name: Extract Cloudflare IPs into a single list
      set_fact:
        cloudflare_ip_list: "{{ cloudflare_ips.results | map(attribute='content') | map('split', '\n') | list | flatten | reject('equalto', '') | list }}"
      when: ansible_ping_result.ping == 'pong'

    - name: Get existing UFW rules
      command: ufw status numbered
      register: ufw_status
      when: ansible_ping_result.ping == 'pong'

    - name: Parse UFW rules for port 443
      set_fact:
        ufw_443_rules: "{{ ufw_status.stdout_lines | select('search', '443/tcp') | list }}"
      when: ansible_ping_result.ping == 'pong'

    - name: Extract IPs from UFW rules
      set_fact:
        ufw_443_ips: "{{ ufw_443_rules | map('regex_search', '([0-9a-fA-F.:/]+)') | list }}"
      when: ansible_ping_result.ping == 'pong'

    - name: Remove old Cloudflare IPs from UFW
      ufw:
        rule: delete
        src: "{{ item }}"
        port: 443
        proto: tcp
      loop: "{{ ufw_443_ips }}"
      when: item not in cloudflare_ip_list
      ignore_errors: yes

    - name: Allow incoming traffic on port 443 from Cloudflare IPs
      ufw:
        rule: allow
        src: "{{ item }}"
        port: 443
        proto: tcp
        comment: "Cloudflare IP"
      loop: "{{ cloudflare_ip_list }}"
      when: ansible_ping_result.ping == 'pong'

    - name: Enable UFW
      ufw:
        state: enabled
      when: ansible_ping_result.ping == 'pong'

    - name: Reload UFW
      ufw:
        state: reloaded
      when: ansible_ping_result.ping == 'pong'